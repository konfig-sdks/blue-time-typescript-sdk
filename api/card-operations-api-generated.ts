/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsBrandLookupResult } from '../models';
// @ts-ignore
import { PayToolsApiModelsCardInputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsCardOpsChargeRequest } from '../models';
// @ts-ignore
import { PayToolsApiModelsJwsMultipleOutputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull } from '../models';
// @ts-ignore
import { PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull } from '../models';
// @ts-ignore
import { PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull } from '../models';
// @ts-ignore
import { PayToolsApiModelsPayerBase } from '../models';
// @ts-ignore
import { PayToolsApiModelsPayerDetailsNoIpAddress } from '../models';
// @ts-ignore
import { PayToolsApiModelsStringTokenIntputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsTopBrands } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationChargePresetData } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationPreSignedDataModel } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationSignedData } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationThreeDsSessionModel } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationTokenizationAction } from '../models';
// @ts-ignore
import { PayToolsSharedEnumsPerform3ds } from '../models';
// @ts-ignore
import { PciBookingIINLookupLibraryRiskLevel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardOperationsApi - axios parameter creator
 * @export
 */
export const CardOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return brand of card prefix.
         * @param {string} iin Card prefix
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandPrefix: async (iin: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iin' is not null or undefined
            assertParamExists('getBrandPrefix', 'iin', iin)
            const localVarPath = `/CardOperations/brand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (iin !== undefined) {
                localVarQueryParameter['iin'] = iin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations/brand',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a token to start a card operation
         * @param {number} ttl Time to live for the returned token
         * @param {PayToolsBlAuthenticationPreSignedDataModel} [payToolsBlAuthenticationPreSignedDataModel] The data to be validated in further requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenStartOperation: async (ttl: number, payToolsBlAuthenticationPreSignedDataModel?: PayToolsBlAuthenticationPreSignedDataModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ttl' is not null or undefined
            assertParamExists('getTokenStartOperation', 'ttl', ttl)
            const localVarPath = `/CardOperations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (ttl !== undefined) {
                localVarQueryParameter['ttl'] = ttl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsBlAuthenticationPreSignedDataModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsBlAuthenticationPreSignedDataModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The result is an array of 5 elements, where each element represents iin prefixes for a givel size as well as the list of logo Url\'s for all brands.  Each element in the top-level array is an object where members are prefixes and data is the brand.  For a quick lookup:  1. get the element by the size of your prefix.  2. try to obtain the prefix as a member name; The member value is the brand    For logo lookup finf thr brand name as the key to the logos member.  If not found, you can try using \'DEFAULT\'.
         * @summary Return top credit card brands for lookup of up to 5 first digits. It covers 90% of the cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopBrandsLookup: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CardOperations/topBrands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations/topBrands',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Perform Univesal payment gateway charge operation
         * @param {PayToolsApiModelsCardOpsChargeRequest} payToolsApiModelsCardOpsChargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performUniversalPaymentGatewayCharge: async (payToolsApiModelsCardOpsChargeRequest: PayToolsApiModelsCardOpsChargeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsCardOpsChargeRequest' is not null or undefined
            assertParamExists('performUniversalPaymentGatewayCharge', 'payToolsApiModelsCardOpsChargeRequest', payToolsApiModelsCardOpsChargeRequest)
            const localVarPath = `/CardOperations/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsCardOpsChargeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations/charge',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsCardOpsChargeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Perform card validation
         * @param {string} iin Card prefix
         * @param {PayToolsApiModelsPayerBase} payToolsApiModelsPayerBase Payer details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performValidation: async (iin: string, payToolsApiModelsPayerBase: PayToolsApiModelsPayerBase, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iin' is not null or undefined
            assertParamExists('performValidation', 'iin', iin)
            // verify required parameter 'payToolsApiModelsPayerBase' is not null or undefined
            assertParamExists('performValidation', 'payToolsApiModelsPayerBase', payToolsApiModelsPayerBase)
            const localVarPath = `/CardOperations/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (iin !== undefined) {
                localVarQueryParameter['iin'] = iin;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsPayerBase,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations/validate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsPayerBase, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Perform validation of the operation using to signed data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performValidation_1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CardOperations/opValidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations/opValidate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tokenize and store card number
         * @param {PayToolsApiModelsStringTokenIntputModel} payToolsApiModelsStringTokenIntputModel Model with card number to be tokenized
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenizeAndStore: async (payToolsApiModelsStringTokenIntputModel: PayToolsApiModelsStringTokenIntputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsStringTokenIntputModel' is not null or undefined
            assertParamExists('tokenizeAndStore', 'payToolsApiModelsStringTokenIntputModel', payToolsApiModelsStringTokenIntputModel)
            const localVarPath = `/CardOperations/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsStringTokenIntputModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CardOperations/store',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsStringTokenIntputModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardOperationsApi - functional programming interface
 * @export
 */
export const CardOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return brand of card prefix.
         * @param {CardOperationsApiGetBrandPrefixRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandPrefix(requestParameters: CardOperationsApiGetBrandPrefixRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsBrandLookupResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandPrefix(requestParameters.iin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a token to start a card operation
         * @param {CardOperationsApiGetTokenStartOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenStartOperation(requestParameters: CardOperationsApiGetTokenStartOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsMultipleOutputModel>> {
            const payToolsBlAuthenticationPreSignedDataModel: PayToolsBlAuthenticationPreSignedDataModel = {
                threeDsSessionModel: requestParameters.threeDsSessionModel,
                vld: requestParameters.vld,
                3ds: requestParameters.3ds,
                crg: requestParameters.crg,
                tkn: requestParameters.tkn,
                crg_d: requestParameters.crg_d
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenStartOperation(requestParameters.ttl, payToolsBlAuthenticationPreSignedDataModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The result is an array of 5 elements, where each element represents iin prefixes for a givel size as well as the list of logo Url\'s for all brands.  Each element in the top-level array is an object where members are prefixes and data is the brand.  For a quick lookup:  1. get the element by the size of your prefix.  2. try to obtain the prefix as a member name; The member value is the brand    For logo lookup finf thr brand name as the key to the logos member.  If not found, you can try using \'DEFAULT\'.
         * @summary Return top credit card brands for lookup of up to 5 first digits. It covers 90% of the cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopBrandsLookup(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsTopBrands>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopBrandsLookup(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Perform Univesal payment gateway charge operation
         * @param {CardOperationsApiPerformUniversalPaymentGatewayChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performUniversalPaymentGatewayCharge(requestParameters: CardOperationsApiPerformUniversalPaymentGatewayChargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull>> {
            const payToolsApiModelsCardOpsChargeRequest: PayToolsApiModelsCardOpsChargeRequest = {
                payerDetails: requestParameters.payerDetails,
                card: requestParameters.card,
                myRef: requestParameters.myRef
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performUniversalPaymentGatewayCharge(payToolsApiModelsCardOpsChargeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Perform card validation
         * @param {CardOperationsApiPerformValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performValidation(requestParameters: CardOperationsApiPerformValidationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull>> {
            const payToolsApiModelsPayerBase: PayToolsApiModelsPayerBase = {
                city: requestParameters.city,
                stateProvince: requestParameters.stateProvince,
                countryCode: requestParameters.countryCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performValidation(requestParameters.iin, payToolsApiModelsPayerBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Perform validation of the operation using to signed data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performValidation_1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsBlAuthenticationSignedData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.performValidation_1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tokenize and store card number
         * @param {CardOperationsApiTokenizeAndStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenizeAndStore(requestParameters: CardOperationsApiTokenizeAndStoreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull>> {
            const payToolsApiModelsStringTokenIntputModel: PayToolsApiModelsStringTokenIntputModel = {
                payload: requestParameters.payload
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenizeAndStore(payToolsApiModelsStringTokenIntputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardOperationsApi - factory interface
 * @export
 */
export const CardOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardOperationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Return brand of card prefix.
         * @param {CardOperationsApiGetBrandPrefixRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandPrefix(requestParameters: CardOperationsApiGetBrandPrefixRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsBrandLookupResult> {
            return localVarFp.getBrandPrefix(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a token to start a card operation
         * @param {CardOperationsApiGetTokenStartOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenStartOperation(requestParameters: CardOperationsApiGetTokenStartOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsMultipleOutputModel> {
            return localVarFp.getTokenStartOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The result is an array of 5 elements, where each element represents iin prefixes for a givel size as well as the list of logo Url\'s for all brands.  Each element in the top-level array is an object where members are prefixes and data is the brand.  For a quick lookup:  1. get the element by the size of your prefix.  2. try to obtain the prefix as a member name; The member value is the brand    For logo lookup finf thr brand name as the key to the logos member.  If not found, you can try using \'DEFAULT\'.
         * @summary Return top credit card brands for lookup of up to 5 first digits. It covers 90% of the cases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopBrandsLookup(options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsTopBrands> {
            return localVarFp.getTopBrandsLookup(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Perform Univesal payment gateway charge operation
         * @param {CardOperationsApiPerformUniversalPaymentGatewayChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performUniversalPaymentGatewayCharge(requestParameters: CardOperationsApiPerformUniversalPaymentGatewayChargeRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsOutputModel1PaymentsOperationResultPaymentsVersion0000CultureneutralPublicKeyTokennull> {
            return localVarFp.performUniversalPaymentGatewayCharge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Perform card validation
         * @param {CardOperationsApiPerformValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performValidation(requestParameters: CardOperationsApiPerformValidationRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsOutputModel1pciBookingIINLookupLibraryCardValidationResultpciBookingIINLookupLibraryVersion1040CultureneutralPublicKeyTokennull> {
            return localVarFp.performValidation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Perform validation of the operation using to signed data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performValidation_1(options?: AxiosRequestConfig): AxiosPromise<PayToolsBlAuthenticationSignedData> {
            return localVarFp.performValidation_1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tokenize and store card number
         * @param {CardOperationsApiTokenizeAndStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenizeAndStore(requestParameters: CardOperationsApiTokenizeAndStoreRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsOutputModel1PayToolsApiModelsStringTokenMetaDataOutputModelPayToolsApiVersion10715CultureneutralPublicKeyTokennull> {
            return localVarFp.tokenizeAndStore(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBrandPrefix operation in CardOperationsApi.
 * @export
 * @interface CardOperationsApiGetBrandPrefixRequest
 */
export type CardOperationsApiGetBrandPrefixRequest = {
    
    /**
    * Card prefix
    * @type {string}
    * @memberof CardOperationsApiGetBrandPrefix
    */
    readonly iin: string
    
}

/**
 * Request parameters for getTokenStartOperation operation in CardOperationsApi.
 * @export
 * @interface CardOperationsApiGetTokenStartOperationRequest
 */
export type CardOperationsApiGetTokenStartOperationRequest = {
    
    /**
    * Time to live for the returned token
    * @type {number}
    * @memberof CardOperationsApiGetTokenStartOperation
    */
    readonly ttl: number
    
} & PayToolsBlAuthenticationPreSignedDataModel

/**
 * Request parameters for performUniversalPaymentGatewayCharge operation in CardOperationsApi.
 * @export
 * @interface CardOperationsApiPerformUniversalPaymentGatewayChargeRequest
 */
export type CardOperationsApiPerformUniversalPaymentGatewayChargeRequest = {
    
} & PayToolsApiModelsCardOpsChargeRequest

/**
 * Request parameters for performValidation operation in CardOperationsApi.
 * @export
 * @interface CardOperationsApiPerformValidationRequest
 */
export type CardOperationsApiPerformValidationRequest = {
    
    /**
    * Card prefix
    * @type {string}
    * @memberof CardOperationsApiPerformValidation
    */
    readonly iin: string
    
} & PayToolsApiModelsPayerBase

/**
 * Request parameters for tokenizeAndStore operation in CardOperationsApi.
 * @export
 * @interface CardOperationsApiTokenizeAndStoreRequest
 */
export type CardOperationsApiTokenizeAndStoreRequest = {
    
} & PayToolsApiModelsStringTokenIntputModel

/**
 * CardOperationsApiGenerated - object-oriented interface
 * @export
 * @class CardOperationsApiGenerated
 * @extends {BaseAPI}
 */
export class CardOperationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Return brand of card prefix.
     * @param {CardOperationsApiGetBrandPrefixRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public getBrandPrefix(requestParameters: CardOperationsApiGetBrandPrefixRequest, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).getBrandPrefix(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a token to start a card operation
     * @param {CardOperationsApiGetTokenStartOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public getTokenStartOperation(requestParameters: CardOperationsApiGetTokenStartOperationRequest, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).getTokenStartOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The result is an array of 5 elements, where each element represents iin prefixes for a givel size as well as the list of logo Url\'s for all brands.  Each element in the top-level array is an object where members are prefixes and data is the brand.  For a quick lookup:  1. get the element by the size of your prefix.  2. try to obtain the prefix as a member name; The member value is the brand    For logo lookup finf thr brand name as the key to the logos member.  If not found, you can try using \'DEFAULT\'.
     * @summary Return top credit card brands for lookup of up to 5 first digits. It covers 90% of the cases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public getTopBrandsLookup(options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).getTopBrandsLookup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Perform Univesal payment gateway charge operation
     * @param {CardOperationsApiPerformUniversalPaymentGatewayChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public performUniversalPaymentGatewayCharge(requestParameters: CardOperationsApiPerformUniversalPaymentGatewayChargeRequest, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).performUniversalPaymentGatewayCharge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Perform card validation
     * @param {CardOperationsApiPerformValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public performValidation(requestParameters: CardOperationsApiPerformValidationRequest, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).performValidation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Perform validation of the operation using to signed data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public performValidation_1(options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).performValidation_1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tokenize and store card number
     * @param {CardOperationsApiTokenizeAndStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardOperationsApiGenerated
     */
    public tokenizeAndStore(requestParameters: CardOperationsApiTokenizeAndStoreRequest, options?: AxiosRequestConfig) {
        return CardOperationsApiFp(this.configuration).tokenizeAndStore(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
