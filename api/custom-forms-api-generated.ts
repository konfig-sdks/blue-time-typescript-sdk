/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFormsUploadFormFolderRequest } from '../models';
// @ts-ignore
import { CustomFormsUploadFormFolderRequest1 } from '../models';
// @ts-ignore
import { PayToolsApiModelsCustomFormMetaModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsCustomFormUploadModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFormsApi - axios parameter creator
 * @export
 */
export const CustomFormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows you to retrieve the list of custom forms stored in PCI Booking
         * @summary List Custom Forms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CustomForms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CustomForms',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to delete a custom form that was previously stored in PCI Booking.
         * @summary Delete a Custom Forms
         * @param {string} name The unique identifier provided to this custom form when originally uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForm: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('removeForm', 'name', name)
            const localVarPath = `/CustomForms/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CustomForms/{name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to upload a custom form into PCI Booking. You can design your custom form copletely on your own and upload any and all related content (JavaScript, stylesheet, images, etc) to PCI Booking. All content should be stored in one ZIP file that you will provide in this request.  The uploaded data should be a zip file, properly encoded as a part named \'zipFile\' in the body.
         * @summary Upload a custom form folder (add or replace)
         * @param {string} name The unique name to identify this form in PCI Booking. You will use this value whenever referencing this custom form.
         * @param {CustomFormsUploadFormFolderRequest1} [customFormsUploadFormFolderRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFormFolder: async (name: string, customFormsUploadFormFolderRequest1?: CustomFormsUploadFormFolderRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('uploadFormFolder', 'name', name)
            const localVarPath = `/CustomForms/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: customFormsUploadFormFolderRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CustomForms/{name}',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFormsApi - functional programming interface
 * @export
 */
export const CustomFormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFormsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows you to retrieve the list of custom forms stored in PCI Booking
         * @summary List Custom Forms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsCustomFormMetaModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to delete a custom form that was previously stored in PCI Booking.
         * @summary Delete a Custom Forms
         * @param {CustomFormsApiRemoveFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeForm(requestParameters: CustomFormsApiRemoveFormRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeForm(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to upload a custom form into PCI Booking. You can design your custom form copletely on your own and upload any and all related content (JavaScript, stylesheet, images, etc) to PCI Booking. All content should be stored in one ZIP file that you will provide in this request.  The uploaded data should be a zip file, properly encoded as a part named \'zipFile\' in the body.
         * @summary Upload a custom form folder (add or replace)
         * @param {CustomFormsApiUploadFormFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFormFolder(requestParameters: CustomFormsApiUploadFormFolderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsCustomFormUploadModel>> {
            const customFormsUploadFormFolderRequest1: CustomFormsUploadFormFolderRequest1 = {
                ContentType: requestParameters.ContentType,
                ContentDisposition: requestParameters.ContentDisposition,
                Headers: requestParameters.Headers,
                Length: requestParameters.Length,
                Name: requestParameters.Name,
                FileName: requestParameters.FileName
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFormFolder(requestParameters.name, customFormsUploadFormFolderRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFormsApi - factory interface
 * @export
 */
export const CustomFormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFormsApiFp(configuration)
    return {
        /**
         * This method allows you to retrieve the list of custom forms stored in PCI Booking
         * @summary List Custom Forms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsCustomFormMetaModel> {
            return localVarFp.getList(options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to delete a custom form that was previously stored in PCI Booking.
         * @summary Delete a Custom Forms
         * @param {CustomFormsApiRemoveFormRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeForm(requestParameters: CustomFormsApiRemoveFormRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeForm(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to upload a custom form into PCI Booking. You can design your custom form copletely on your own and upload any and all related content (JavaScript, stylesheet, images, etc) to PCI Booking. All content should be stored in one ZIP file that you will provide in this request.  The uploaded data should be a zip file, properly encoded as a part named \'zipFile\' in the body.
         * @summary Upload a custom form folder (add or replace)
         * @param {CustomFormsApiUploadFormFolderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFormFolder(requestParameters: CustomFormsApiUploadFormFolderRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsCustomFormUploadModel> {
            return localVarFp.uploadFormFolder(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for removeForm operation in CustomFormsApi.
 * @export
 * @interface CustomFormsApiRemoveFormRequest
 */
export type CustomFormsApiRemoveFormRequest = {
    
    /**
    * The unique identifier provided to this custom form when originally uploaded
    * @type {string}
    * @memberof CustomFormsApiRemoveForm
    */
    readonly name: string
    
}

/**
 * Request parameters for uploadFormFolder operation in CustomFormsApi.
 * @export
 * @interface CustomFormsApiUploadFormFolderRequest
 */
export type CustomFormsApiUploadFormFolderRequest = {
    
    /**
    * The unique name to identify this form in PCI Booking. You will use this value whenever referencing this custom form.
    * @type {string}
    * @memberof CustomFormsApiUploadFormFolder
    */
    readonly name: string
    
} & CustomFormsUploadFormFolderRequest1

/**
 * CustomFormsApiGenerated - object-oriented interface
 * @export
 * @class CustomFormsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFormsApiGenerated extends BaseAPI {
    /**
     * This method allows you to retrieve the list of custom forms stored in PCI Booking
     * @summary List Custom Forms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsApiGenerated
     */
    public getList(options?: AxiosRequestConfig) {
        return CustomFormsApiFp(this.configuration).getList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to delete a custom form that was previously stored in PCI Booking.
     * @summary Delete a Custom Forms
     * @param {CustomFormsApiRemoveFormRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsApiGenerated
     */
    public removeForm(requestParameters: CustomFormsApiRemoveFormRequest, options?: AxiosRequestConfig) {
        return CustomFormsApiFp(this.configuration).removeForm(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to upload a custom form into PCI Booking. You can design your custom form copletely on your own and upload any and all related content (JavaScript, stylesheet, images, etc) to PCI Booking. All content should be stored in one ZIP file that you will provide in this request.  The uploaded data should be a zip file, properly encoded as a part named \'zipFile\' in the body.
     * @summary Upload a custom form folder (add or replace)
     * @param {CustomFormsApiUploadFormFolderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFormsApiGenerated
     */
    public uploadFormFolder(requestParameters: CustomFormsApiUploadFormFolderRequest, options?: AxiosRequestConfig) {
        return CustomFormsApiFp(this.configuration).uploadFormFolder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
