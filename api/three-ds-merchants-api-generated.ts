/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsThreeDsMerchantOutputModel } from '../models';
// @ts-ignore
import { PayToolsDalEntitiesThreeDsBrand } from '../models';
// @ts-ignore
import { PayToolsDalEntitiesThreeDsMerchant } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ThreeDsMerchantsApi - axios parameter creator
 * @export
 */
export const ThreeDsMerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Merchant
         * @param {string} name Name of merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantInfo: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getMerchantInfo', 'name', name)
            const localVarPath = `/ThreeDsMerchants/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsMerchants/{name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Merchants
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ThreeDsMerchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsMerchants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Merchant
         * @param {string} name Name of merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMerchant: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('removeMerchant', 'name', name)
            const localVarPath = `/ThreeDsMerchants/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsMerchants/{name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set a merchant
         * @param {string} name Name of merchant
         * @param {PayToolsDalEntitiesThreeDsMerchant} [payToolsDalEntitiesThreeDsMerchant] 3DS Merchant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMerchantInfo: async (name: string, payToolsDalEntitiesThreeDsMerchant?: PayToolsDalEntitiesThreeDsMerchant, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateMerchantInfo', 'name', name)
            const localVarPath = `/ThreeDsMerchants/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsDalEntitiesThreeDsMerchant,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsMerchants/{name}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsDalEntitiesThreeDsMerchant, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreeDsMerchantsApi - functional programming interface
 * @export
 */
export const ThreeDsMerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThreeDsMerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Merchant
         * @param {ThreeDsMerchantsApiGetMerchantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantInfo(requestParameters: ThreeDsMerchantsApiGetMerchantInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsThreeDsMerchantOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantInfo(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Merchants
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMerchants(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayToolsApiModelsThreeDsMerchantOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMerchants(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Merchant
         * @param {ThreeDsMerchantsApiRemoveMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMerchant(requestParameters: ThreeDsMerchantsApiRemoveMerchantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMerchant(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set a merchant
         * @param {ThreeDsMerchantsApiUpdateMerchantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMerchantInfo(requestParameters: ThreeDsMerchantsApiUpdateMerchantInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsDalEntitiesThreeDsMerchant>> {
            const payToolsDalEntitiesThreeDsMerchant: PayToolsDalEntitiesThreeDsMerchant = {
                merchantName: requestParameters.merchantName,
                merchantDisplayName: requestParameters.merchantDisplayName,
                merchantRequestorIdSuffix: requestParameters.merchantRequestorIdSuffix,
                merchantCountry: requestParameters.merchantCountry,
                merchantUrl: requestParameters.merchantUrl,
                acquirerName: requestParameters.acquirerName,
                brands: requestParameters.brands
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMerchantInfo(requestParameters.name, payToolsDalEntitiesThreeDsMerchant, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThreeDsMerchantsApi - factory interface
 * @export
 */
export const ThreeDsMerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThreeDsMerchantsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Merchant
         * @param {ThreeDsMerchantsApiGetMerchantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantInfo(requestParameters: ThreeDsMerchantsApiGetMerchantInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsThreeDsMerchantOutputModel> {
            return localVarFp.getMerchantInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Merchants
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMerchants(options?: AxiosRequestConfig): AxiosPromise<Array<PayToolsApiModelsThreeDsMerchantOutputModel>> {
            return localVarFp.listMerchants(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Merchant
         * @param {ThreeDsMerchantsApiRemoveMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMerchant(requestParameters: ThreeDsMerchantsApiRemoveMerchantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMerchant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set a merchant
         * @param {ThreeDsMerchantsApiUpdateMerchantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMerchantInfo(requestParameters: ThreeDsMerchantsApiUpdateMerchantInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsDalEntitiesThreeDsMerchant> {
            return localVarFp.updateMerchantInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMerchantInfo operation in ThreeDsMerchantsApi.
 * @export
 * @interface ThreeDsMerchantsApiGetMerchantInfoRequest
 */
export type ThreeDsMerchantsApiGetMerchantInfoRequest = {
    
    /**
    * Name of merchant
    * @type {string}
    * @memberof ThreeDsMerchantsApiGetMerchantInfo
    */
    readonly name: string
    
}

/**
 * Request parameters for removeMerchant operation in ThreeDsMerchantsApi.
 * @export
 * @interface ThreeDsMerchantsApiRemoveMerchantRequest
 */
export type ThreeDsMerchantsApiRemoveMerchantRequest = {
    
    /**
    * Name of merchant
    * @type {string}
    * @memberof ThreeDsMerchantsApiRemoveMerchant
    */
    readonly name: string
    
}

/**
 * Request parameters for updateMerchantInfo operation in ThreeDsMerchantsApi.
 * @export
 * @interface ThreeDsMerchantsApiUpdateMerchantInfoRequest
 */
export type ThreeDsMerchantsApiUpdateMerchantInfoRequest = {
    
    /**
    * Name of merchant
    * @type {string}
    * @memberof ThreeDsMerchantsApiUpdateMerchantInfo
    */
    readonly name: string
    
} & PayToolsDalEntitiesThreeDsMerchant

/**
 * ThreeDsMerchantsApiGenerated - object-oriented interface
 * @export
 * @class ThreeDsMerchantsApiGenerated
 * @extends {BaseAPI}
 */
export class ThreeDsMerchantsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get a Merchant
     * @param {ThreeDsMerchantsApiGetMerchantInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsMerchantsApiGenerated
     */
    public getMerchantInfo(requestParameters: ThreeDsMerchantsApiGetMerchantInfoRequest, options?: AxiosRequestConfig) {
        return ThreeDsMerchantsApiFp(this.configuration).getMerchantInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Merchants
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsMerchantsApiGenerated
     */
    public listMerchants(options?: AxiosRequestConfig) {
        return ThreeDsMerchantsApiFp(this.configuration).listMerchants(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Merchant
     * @param {ThreeDsMerchantsApiRemoveMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsMerchantsApiGenerated
     */
    public removeMerchant(requestParameters: ThreeDsMerchantsApiRemoveMerchantRequest, options?: AxiosRequestConfig) {
        return ThreeDsMerchantsApiFp(this.configuration).removeMerchant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set a merchant
     * @param {ThreeDsMerchantsApiUpdateMerchantInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsMerchantsApiGenerated
     */
    public updateMerchantInfo(requestParameters: ThreeDsMerchantsApiUpdateMerchantInfoRequest, options?: AxiosRequestConfig) {
        return ThreeDsMerchantsApiFp(this.configuration).updateMerchantInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
