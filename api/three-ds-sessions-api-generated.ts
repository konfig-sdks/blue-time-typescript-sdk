/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsJwsOutputModel } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationThreeDsSessionModel } from '../models';
// @ts-ignore
import { PayToolsSharedModelsMoneyModel } from '../models';
// @ts-ignore
import { PayToolsSharedModelsThreeDsClientMessage } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ThreeDsSessionsApi - axios parameter creator
 * @export
 */
export const ThreeDsSessionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get challenge ststus, as stored on server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChallengeStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ThreeDsSessions/challengeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsSessions/challengeStatus',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a token to start a card operation
         * @param {number} ttl Time to live for the returned token
         * @param {PayToolsBlAuthenticationThreeDsSessionModel} [payToolsBlAuthenticationThreeDsSessionModel] The data to be validated in further requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenStartOperation: async (ttl: number, payToolsBlAuthenticationThreeDsSessionModel?: PayToolsBlAuthenticationThreeDsSessionModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ttl' is not null or undefined
            assertParamExists('getTokenStartOperation', 'ttl', ttl)
            const localVarPath = `/ThreeDsSessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (ttl !== undefined) {
                localVarQueryParameter['ttl'] = ttl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsBlAuthenticationThreeDsSessionModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsSessions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsBlAuthenticationThreeDsSessionModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle a callback (redirect from device fingerprint)
         * @param {string} sessionId The value containing data to designate the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleFingerprintCallback: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('handleFingerprintCallback', 'sessionId', sessionId)
            const localVarPath = `/ThreeDsSessions/fingerprintCallback/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-sessionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsSessions/fingerprintCallback/{sessionId}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Handle a callback (redirect from challenge)
         * @param {string} sessionId The value containing data to designate the client
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleMpiChallengeCallback: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('handleMpiChallengeCallback', 'sessionId', sessionId)
            const localVarPath = `/ThreeDsSessions/mpiChallengeCallback/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId !== undefined ? sessionId : `-sessionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsSessions/mpiChallengeCallback/{sessionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Perform validation of the operation using to signed data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performValidationOperation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ThreeDsSessions/opValidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JwsAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/ThreeDsSessions/opValidate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThreeDsSessionsApi - functional programming interface
 * @export
 */
export const ThreeDsSessionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThreeDsSessionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get challenge ststus, as stored on server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChallengeStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsSharedModelsThreeDsClientMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChallengeStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a token to start a card operation
         * @param {ThreeDsSessionsApiGetTokenStartOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenStartOperation(requestParameters: ThreeDsSessionsApiGetTokenStartOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsOutputModel>> {
            const payToolsBlAuthenticationThreeDsSessionModel: PayToolsBlAuthenticationThreeDsSessionModel = {
                merchantAccountName: requestParameters.merchantAccountName,
                amt: requestParameters.amt
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenStartOperation(requestParameters.ttl, payToolsBlAuthenticationThreeDsSessionModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Handle a callback (redirect from device fingerprint)
         * @param {ThreeDsSessionsApiHandleFingerprintCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleFingerprintCallback(requestParameters: ThreeDsSessionsApiHandleFingerprintCallbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleFingerprintCallback(requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Handle a callback (redirect from challenge)
         * @param {ThreeDsSessionsApiHandleMpiChallengeCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handleMpiChallengeCallback(requestParameters: ThreeDsSessionsApiHandleMpiChallengeCallbackRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.handleMpiChallengeCallback(requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Perform validation of the operation using to signed data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performValidationOperation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.performValidationOperation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThreeDsSessionsApi - factory interface
 * @export
 */
export const ThreeDsSessionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThreeDsSessionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get challenge ststus, as stored on server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChallengeStatus(options?: AxiosRequestConfig): AxiosPromise<PayToolsSharedModelsThreeDsClientMessage> {
            return localVarFp.getChallengeStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a token to start a card operation
         * @param {ThreeDsSessionsApiGetTokenStartOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenStartOperation(requestParameters: ThreeDsSessionsApiGetTokenStartOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsOutputModel> {
            return localVarFp.getTokenStartOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle a callback (redirect from device fingerprint)
         * @param {ThreeDsSessionsApiHandleFingerprintCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleFingerprintCallback(requestParameters: ThreeDsSessionsApiHandleFingerprintCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.handleFingerprintCallback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Handle a callback (redirect from challenge)
         * @param {ThreeDsSessionsApiHandleMpiChallengeCallbackRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handleMpiChallengeCallback(requestParameters: ThreeDsSessionsApiHandleMpiChallengeCallbackRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.handleMpiChallengeCallback(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Perform validation of the operation using to signed data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performValidationOperation(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.performValidationOperation(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTokenStartOperation operation in ThreeDsSessionsApi.
 * @export
 * @interface ThreeDsSessionsApiGetTokenStartOperationRequest
 */
export type ThreeDsSessionsApiGetTokenStartOperationRequest = {
    
    /**
    * Time to live for the returned token
    * @type {number}
    * @memberof ThreeDsSessionsApiGetTokenStartOperation
    */
    readonly ttl: number
    
} & PayToolsBlAuthenticationThreeDsSessionModel

/**
 * Request parameters for handleFingerprintCallback operation in ThreeDsSessionsApi.
 * @export
 * @interface ThreeDsSessionsApiHandleFingerprintCallbackRequest
 */
export type ThreeDsSessionsApiHandleFingerprintCallbackRequest = {
    
    /**
    * The value containing data to designate the client
    * @type {string}
    * @memberof ThreeDsSessionsApiHandleFingerprintCallback
    */
    readonly sessionId: string
    
}

/**
 * Request parameters for handleMpiChallengeCallback operation in ThreeDsSessionsApi.
 * @export
 * @interface ThreeDsSessionsApiHandleMpiChallengeCallbackRequest
 */
export type ThreeDsSessionsApiHandleMpiChallengeCallbackRequest = {
    
    /**
    * The value containing data to designate the client
    * @type {string}
    * @memberof ThreeDsSessionsApiHandleMpiChallengeCallback
    */
    readonly sessionId: string
    
}

/**
 * ThreeDsSessionsApiGenerated - object-oriented interface
 * @export
 * @class ThreeDsSessionsApiGenerated
 * @extends {BaseAPI}
 */
export class ThreeDsSessionsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get challenge ststus, as stored on server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsSessionsApiGenerated
     */
    public getChallengeStatus(options?: AxiosRequestConfig) {
        return ThreeDsSessionsApiFp(this.configuration).getChallengeStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a token to start a card operation
     * @param {ThreeDsSessionsApiGetTokenStartOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsSessionsApiGenerated
     */
    public getTokenStartOperation(requestParameters: ThreeDsSessionsApiGetTokenStartOperationRequest, options?: AxiosRequestConfig) {
        return ThreeDsSessionsApiFp(this.configuration).getTokenStartOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle a callback (redirect from device fingerprint)
     * @param {ThreeDsSessionsApiHandleFingerprintCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsSessionsApiGenerated
     */
    public handleFingerprintCallback(requestParameters: ThreeDsSessionsApiHandleFingerprintCallbackRequest, options?: AxiosRequestConfig) {
        return ThreeDsSessionsApiFp(this.configuration).handleFingerprintCallback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Handle a callback (redirect from challenge)
     * @param {ThreeDsSessionsApiHandleMpiChallengeCallbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsSessionsApiGenerated
     */
    public handleMpiChallengeCallback(requestParameters: ThreeDsSessionsApiHandleMpiChallengeCallbackRequest, options?: AxiosRequestConfig) {
        return ThreeDsSessionsApiFp(this.configuration).handleMpiChallengeCallback(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Perform validation of the operation using to signed data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThreeDsSessionsApiGenerated
     */
    public performValidationOperation(options?: AxiosRequestConfig) {
        return ThreeDsSessionsApiFp(this.configuration).performValidationOperation(options).then((request) => request(this.axios, this.basePath));
    }
}
