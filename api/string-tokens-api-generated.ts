/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsStringTokenIntputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsStringTokenMetaDataOutputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsStringTokenOutputModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StringTokensApi - axios parameter creator
 * @export
 */
export const StringTokensApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows you to delete a stringToken by its token
         * @summary Delete an existing string by token
         * @param {string} token The token ID representing the string to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByToken: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('deleteByToken', 'token', token)
            const localVarPath = `/StringTokens/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token !== undefined ? token : `-token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/StringTokens/{token}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to retrieve the stored content of the StringToken.
         * @summary Retrieve content of StringToken
         * @param {string} token The token ID of the StringToken you would like to retrieve the content for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getContent', 'token', token)
            const localVarPath = `/StringTokens/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token !== undefined ? token : `-token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/StringTokens/{token}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to retrieve the meta data of a StringToken.  The response to this method will **not** retrieve the content of the StringToken (you can do that by using `GET /StringTokens/{token}`)
         * @summary Retrieve meta data of a StringToken
         * @param {string} token Token representing the string to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetaData: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('getMetaData', 'token', token)
            const localVarPath = `/StringTokens/{token}/meta`
                .replace(`{${"token"}}`, encodeURIComponent(String(token !== undefined ? token : `-token-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/StringTokens/{token}/meta',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to submit a string to be stored and tokenized in our system.  Once tokenized, the token ID will be returned in the body of the response and the full token URI will be returned in the `Location` header.
         * @summary Store and tokenize a string
         * @param {PayToolsApiModelsStringTokenIntputModel} payToolsApiModelsStringTokenIntputModel StringToken input model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeAndTokenize: async (payToolsApiModelsStringTokenIntputModel: PayToolsApiModelsStringTokenIntputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsStringTokenIntputModel' is not null or undefined
            assertParamExists('storeAndTokenize', 'payToolsApiModelsStringTokenIntputModel', payToolsApiModelsStringTokenIntputModel)
            const localVarPath = `/StringTokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsStringTokenIntputModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/StringTokens',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsStringTokenIntputModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StringTokensApi - functional programming interface
 * @export
 */
export const StringTokensApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StringTokensApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows you to delete a stringToken by its token
         * @summary Delete an existing string by token
         * @param {StringTokensApiDeleteByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteByToken(requestParameters: StringTokensApiDeleteByTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteByToken(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to retrieve the stored content of the StringToken.
         * @summary Retrieve content of StringToken
         * @param {StringTokensApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContent(requestParameters: StringTokensApiGetContentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsStringTokenOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContent(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to retrieve the meta data of a StringToken.  The response to this method will **not** retrieve the content of the StringToken (you can do that by using `GET /StringTokens/{token}`)
         * @summary Retrieve meta data of a StringToken
         * @param {StringTokensApiGetMetaDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetaData(requestParameters: StringTokensApiGetMetaDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsStringTokenMetaDataOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetaData(requestParameters.token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to submit a string to be stored and tokenized in our system.  Once tokenized, the token ID will be returned in the body of the response and the full token URI will be returned in the `Location` header.
         * @summary Store and tokenize a string
         * @param {StringTokensApiStoreAndTokenizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeAndTokenize(requestParameters: StringTokensApiStoreAndTokenizeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsStringTokenMetaDataOutputModel>> {
            const payToolsApiModelsStringTokenIntputModel: PayToolsApiModelsStringTokenIntputModel = {
                payload: requestParameters.payload
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeAndTokenize(payToolsApiModelsStringTokenIntputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StringTokensApi - factory interface
 * @export
 */
export const StringTokensApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StringTokensApiFp(configuration)
    return {
        /**
         * This method allows you to delete a stringToken by its token
         * @summary Delete an existing string by token
         * @param {StringTokensApiDeleteByTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByToken(requestParameters: StringTokensApiDeleteByTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteByToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to retrieve the stored content of the StringToken.
         * @summary Retrieve content of StringToken
         * @param {StringTokensApiGetContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContent(requestParameters: StringTokensApiGetContentRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsStringTokenOutputModel> {
            return localVarFp.getContent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to retrieve the meta data of a StringToken.  The response to this method will **not** retrieve the content of the StringToken (you can do that by using `GET /StringTokens/{token}`)
         * @summary Retrieve meta data of a StringToken
         * @param {StringTokensApiGetMetaDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetaData(requestParameters: StringTokensApiGetMetaDataRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsStringTokenMetaDataOutputModel> {
            return localVarFp.getMetaData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to submit a string to be stored and tokenized in our system.  Once tokenized, the token ID will be returned in the body of the response and the full token URI will be returned in the `Location` header.
         * @summary Store and tokenize a string
         * @param {StringTokensApiStoreAndTokenizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeAndTokenize(requestParameters: StringTokensApiStoreAndTokenizeRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsStringTokenMetaDataOutputModel> {
            return localVarFp.storeAndTokenize(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteByToken operation in StringTokensApi.
 * @export
 * @interface StringTokensApiDeleteByTokenRequest
 */
export type StringTokensApiDeleteByTokenRequest = {
    
    /**
    * The token ID representing the string to be deleted
    * @type {string}
    * @memberof StringTokensApiDeleteByToken
    */
    readonly token: string
    
}

/**
 * Request parameters for getContent operation in StringTokensApi.
 * @export
 * @interface StringTokensApiGetContentRequest
 */
export type StringTokensApiGetContentRequest = {
    
    /**
    * The token ID of the StringToken you would like to retrieve the content for
    * @type {string}
    * @memberof StringTokensApiGetContent
    */
    readonly token: string
    
}

/**
 * Request parameters for getMetaData operation in StringTokensApi.
 * @export
 * @interface StringTokensApiGetMetaDataRequest
 */
export type StringTokensApiGetMetaDataRequest = {
    
    /**
    * Token representing the string to be retrieved
    * @type {string}
    * @memberof StringTokensApiGetMetaData
    */
    readonly token: string
    
}

/**
 * Request parameters for storeAndTokenize operation in StringTokensApi.
 * @export
 * @interface StringTokensApiStoreAndTokenizeRequest
 */
export type StringTokensApiStoreAndTokenizeRequest = {
    
} & PayToolsApiModelsStringTokenIntputModel

/**
 * StringTokensApiGenerated - object-oriented interface
 * @export
 * @class StringTokensApiGenerated
 * @extends {BaseAPI}
 */
export class StringTokensApiGenerated extends BaseAPI {
    /**
     * This method allows you to delete a stringToken by its token
     * @summary Delete an existing string by token
     * @param {StringTokensApiDeleteByTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringTokensApiGenerated
     */
    public deleteByToken(requestParameters: StringTokensApiDeleteByTokenRequest, options?: AxiosRequestConfig) {
        return StringTokensApiFp(this.configuration).deleteByToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to retrieve the stored content of the StringToken.
     * @summary Retrieve content of StringToken
     * @param {StringTokensApiGetContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringTokensApiGenerated
     */
    public getContent(requestParameters: StringTokensApiGetContentRequest, options?: AxiosRequestConfig) {
        return StringTokensApiFp(this.configuration).getContent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to retrieve the meta data of a StringToken.  The response to this method will **not** retrieve the content of the StringToken (you can do that by using `GET /StringTokens/{token}`)
     * @summary Retrieve meta data of a StringToken
     * @param {StringTokensApiGetMetaDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringTokensApiGenerated
     */
    public getMetaData(requestParameters: StringTokensApiGetMetaDataRequest, options?: AxiosRequestConfig) {
        return StringTokensApiFp(this.configuration).getMetaData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to submit a string to be stored and tokenized in our system.  Once tokenized, the token ID will be returned in the body of the response and the full token URI will be returned in the `Location` header.
     * @summary Store and tokenize a string
     * @param {StringTokensApiStoreAndTokenizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StringTokensApiGenerated
     */
    public storeAndTokenize(requestParameters: StringTokensApiStoreAndTokenizeRequest, options?: AxiosRequestConfig) {
        return StringTokensApiFp(this.configuration).storeAndTokenize(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
