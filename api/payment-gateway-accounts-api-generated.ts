/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsPaymentGatewayAccountBriefOutputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsPaymentGatewayAccountFullOutputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsPaymentGatewayAccountInputModel } from '../models';
// @ts-ignore
import { SystemCollectionsGenericKeyValuePair2SystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798eSystemStringSystemPrivateCoreLibVersion6000CultureneutralPublicKeyToken7cec85d7bea7798e } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentGatewayAccountsApi - axios parameter creator
 * @export
 */
export const PaymentGatewayAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to add a new stored Payment Gateway Account in the system or to replace an existing one.
         * @summary Add or Replace a Payment Gateway Account
         * @param {string} name A unique name of this Payment Gateway Account
         * @param {PayToolsApiModelsPaymentGatewayAccountInputModel} payToolsApiModelsPaymentGatewayAccountInputModel Payment gateway account data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrReplace: async (name: string, payToolsApiModelsPaymentGatewayAccountInputModel: PayToolsApiModelsPaymentGatewayAccountInputModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addOrReplace', 'name', name)
            // verify required parameter 'payToolsApiModelsPaymentGatewayAccountInputModel' is not null or undefined
            assertParamExists('addOrReplace', 'payToolsApiModelsPaymentGatewayAccountInputModel', payToolsApiModelsPaymentGatewayAccountInputModel)
            const localVarPath = `/PaymentGatewayAccounts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsPaymentGatewayAccountInputModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGatewayAccounts/{name}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsPaymentGatewayAccountInputModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to list all stored Payment Gateway Accounts in the system
         * @summary List Payment Gateway Accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PaymentGatewayAccounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGatewayAccounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to retrieve the information set on a particular payment gateway account. You can then update it using the `[PUT] PaymentGatewayAccounts/{name}` method
         * @summary Retrieve Payment Gateway Account
         * @param {string} name A unique name of this Payment Gateway Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getInfo', 'name', name)
            const localVarPath = `/PaymentGatewayAccounts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGatewayAccounts/{name}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to delete a stored Payment Gateway Account in the system.
         * @summary Delete a Payment Gateway Account
         * @param {string} name A unique name of this Payment Gateway Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccount: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('removeAccount', 'name', name)
            const localVarPath = `/PaymentGatewayAccounts/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name !== undefined ? name : `-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGatewayAccounts/{name}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentGatewayAccountsApi - functional programming interface
 * @export
 */
export const PaymentGatewayAccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentGatewayAccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to add a new stored Payment Gateway Account in the system or to replace an existing one.
         * @summary Add or Replace a Payment Gateway Account
         * @param {PaymentGatewayAccountsApiAddOrReplaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrReplace(requestParameters: PaymentGatewayAccountsApiAddOrReplaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsPaymentGatewayAccountFullOutputModel>> {
            const payToolsApiModelsPaymentGatewayAccountInputModel: PayToolsApiModelsPaymentGatewayAccountInputModel = {
                paymentGatewayName: requestParameters.paymentGatewayName,
                credentials: requestParameters.credentials
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrReplace(requestParameters.name, payToolsApiModelsPaymentGatewayAccountInputModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to list all stored Payment Gateway Accounts in the system
         * @summary List Payment Gateway Accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to retrieve the information set on a particular payment gateway account. You can then update it using the `[PUT] PaymentGatewayAccounts/{name}` method
         * @summary Retrieve Payment Gateway Account
         * @param {PaymentGatewayAccountsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: PaymentGatewayAccountsApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsPaymentGatewayAccountFullOutputModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to delete a stored Payment Gateway Account in the system.
         * @summary Delete a Payment Gateway Account
         * @param {PaymentGatewayAccountsApiRemoveAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAccount(requestParameters: PaymentGatewayAccountsApiRemoveAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAccount(requestParameters.name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentGatewayAccountsApi - factory interface
 * @export
 */
export const PaymentGatewayAccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentGatewayAccountsApiFp(configuration)
    return {
        /**
         * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to add a new stored Payment Gateway Account in the system or to replace an existing one.
         * @summary Add or Replace a Payment Gateway Account
         * @param {PaymentGatewayAccountsApiAddOrReplaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrReplace(requestParameters: PaymentGatewayAccountsApiAddOrReplaceRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> {
            return localVarFp.addOrReplace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to list all stored Payment Gateway Accounts in the system
         * @summary List Payment Gateway Accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: AxiosRequestConfig): AxiosPromise<Array<PayToolsApiModelsPaymentGatewayAccountBriefOutputModel>> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to retrieve the information set on a particular payment gateway account. You can then update it using the `[PUT] PaymentGatewayAccounts/{name}` method
         * @summary Retrieve Payment Gateway Account
         * @param {PaymentGatewayAccountsApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: PaymentGatewayAccountsApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsPaymentGatewayAccountFullOutputModel> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to delete a stored Payment Gateway Account in the system.
         * @summary Delete a Payment Gateway Account
         * @param {PaymentGatewayAccountsApiRemoveAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAccount(requestParameters: PaymentGatewayAccountsApiRemoveAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addOrReplace operation in PaymentGatewayAccountsApi.
 * @export
 * @interface PaymentGatewayAccountsApiAddOrReplaceRequest
 */
export type PaymentGatewayAccountsApiAddOrReplaceRequest = {
    
    /**
    * A unique name of this Payment Gateway Account
    * @type {string}
    * @memberof PaymentGatewayAccountsApiAddOrReplace
    */
    readonly name: string
    
} & PayToolsApiModelsPaymentGatewayAccountInputModel

/**
 * Request parameters for getInfo operation in PaymentGatewayAccountsApi.
 * @export
 * @interface PaymentGatewayAccountsApiGetInfoRequest
 */
export type PaymentGatewayAccountsApiGetInfoRequest = {
    
    /**
    * A unique name of this Payment Gateway Account
    * @type {string}
    * @memberof PaymentGatewayAccountsApiGetInfo
    */
    readonly name: string
    
}

/**
 * Request parameters for removeAccount operation in PaymentGatewayAccountsApi.
 * @export
 * @interface PaymentGatewayAccountsApiRemoveAccountRequest
 */
export type PaymentGatewayAccountsApiRemoveAccountRequest = {
    
    /**
    * A unique name of this Payment Gateway Account
    * @type {string}
    * @memberof PaymentGatewayAccountsApiRemoveAccount
    */
    readonly name: string
    
}

/**
 * PaymentGatewayAccountsApiGenerated - object-oriented interface
 * @export
 * @class PaymentGatewayAccountsApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentGatewayAccountsApiGenerated extends BaseAPI {
    /**
     * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to add a new stored Payment Gateway Account in the system or to replace an existing one.
     * @summary Add or Replace a Payment Gateway Account
     * @param {PaymentGatewayAccountsApiAddOrReplaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayAccountsApiGenerated
     */
    public addOrReplace(requestParameters: PaymentGatewayAccountsApiAddOrReplaceRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayAccountsApiFp(this.configuration).addOrReplace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to list all stored Payment Gateway Accounts in the system
     * @summary List Payment Gateway Accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayAccountsApiGenerated
     */
    public getAll(options?: AxiosRequestConfig) {
        return PaymentGatewayAccountsApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A Payment Gateway Account is the set of information necessary for connecting to a specific payment gateway through our system.  This method allows you to retrieve the information set on a particular payment gateway account. You can then update it using the `[PUT] PaymentGatewayAccounts/{name}` method
     * @summary Retrieve Payment Gateway Account
     * @param {PaymentGatewayAccountsApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayAccountsApiGenerated
     */
    public getInfo(requestParameters: PaymentGatewayAccountsApiGetInfoRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayAccountsApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to delete a stored Payment Gateway Account in the system.
     * @summary Delete a Payment Gateway Account
     * @param {PaymentGatewayAccountsApiRemoveAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayAccountsApiGenerated
     */
    public removeAccount(requestParameters: PaymentGatewayAccountsApiRemoveAccountRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayAccountsApiFp(this.configuration).removeAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
