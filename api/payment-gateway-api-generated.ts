/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsAuthRequestModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsCaptureVoidRequestModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsCardInputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsPayerDetails } from '../models';
// @ts-ignore
import { PayToolsApiModelsPaymentGatewayAccount } from '../models';
// @ts-ignore
import { PayToolsApiModelsPaymentGatewayDescriptionModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsRefundRequestModel } from '../models';
// @ts-ignore
import { PaymentsNetworkTokenSchemes } from '../models';
// @ts-ignore
import { PaymentsOperationResult } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentGatewayApi - axios parameter creator
 * @export
 */
export const PaymentGatewayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To provide you with full payment orchestration capabilities, we have integrated with many different payment gateways and processors around the world. This method allows you to retrieve the list of all integrated payment gateways in our system and provide you with the relevant connection settings required for each of them.  To see a graphical list of the supported payment gateways, please visit our website.  If you would like us to support a new payment gateway not on the list, please contact our support.
         * @summary List all payment gateways
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGateways: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/PaymentGateway`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGateway',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to perform an \"authorize\" operation (also called \"preauthorization\" or \"authorization\") through your payment gateway. When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation (using our `[PUT] /PaymentGateway/capture` method).  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".  If needed, you can void this \"authorize\" operation by using the `[DELETE] /PaymentGateway/void` method
         * @summary Perform a payment gateway authorize operation
         * @param {PayToolsApiModelsAuthRequestModel} payToolsApiModelsAuthRequestModel Card charge model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performAuthorizeOperation: async (payToolsApiModelsAuthRequestModel: PayToolsApiModelsAuthRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsAuthRequestModel' is not null or undefined
            assertParamExists('performAuthorizeOperation', 'payToolsApiModelsAuthRequestModel', payToolsApiModelsAuthRequestModel)
            const localVarPath = `/PaymentGateway/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsAuthRequestModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGateway/authorize',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsAuthRequestModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to perform a \"capture\" operation on a previously created \"authorize\" operation (see our `[POST] /PaymentGateway/authorize` method for additional information).  When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation.  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".
         * @summary Perform a payment gateway capture operation
         * @param {PayToolsApiModelsCaptureVoidRequestModel} payToolsApiModelsCaptureVoidRequestModel Capture or Void Request Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCaptureOperation: async (payToolsApiModelsCaptureVoidRequestModel: PayToolsApiModelsCaptureVoidRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsCaptureVoidRequestModel' is not null or undefined
            assertParamExists('performCaptureOperation', 'payToolsApiModelsCaptureVoidRequestModel', payToolsApiModelsCaptureVoidRequestModel)
            const localVarPath = `/PaymentGateway/capture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsCaptureVoidRequestModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGateway/capture',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsCaptureVoidRequestModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to perform a \"charge\" operation through your payment gateway. A \"charge\" operation will request immediate payment from the card and the card owner will see this listed as a transaction in their card statement.  If needed, you can void this \"charge\" operation by using the `[DELETE] /PaymentGateway/void` method.
         * @summary Perform a payment gateway charge operation
         * @param {PayToolsApiModelsAuthRequestModel} payToolsApiModelsAuthRequestModel Card charge model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performChargeOperation: async (payToolsApiModelsAuthRequestModel: PayToolsApiModelsAuthRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsAuthRequestModel' is not null or undefined
            assertParamExists('performChargeOperation', 'payToolsApiModelsAuthRequestModel', payToolsApiModelsAuthRequestModel)
            const localVarPath = `/PaymentGateway/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsAuthRequestModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGateway/charge',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsAuthRequestModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to submit a \"refund\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"capture\" (using `[POST] /PaymentGateway/capture`) operations.
         * @summary Perform a payment gateway refund operation
         * @param {PayToolsApiModelsRefundRequestModel} payToolsApiModelsRefundRequestModel Capture or Void Request Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performRefundOperation: async (payToolsApiModelsRefundRequestModel: PayToolsApiModelsRefundRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsRefundRequestModel' is not null or undefined
            assertParamExists('performRefundOperation', 'payToolsApiModelsRefundRequestModel', payToolsApiModelsRefundRequestModel)
            const localVarPath = `/PaymentGateway/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsRefundRequestModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGateway/refund',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsRefundRequestModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to submit a \"void\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"authorize\" (using `[POST] /PaymentGateway/authorize`) operations.
         * @summary Perform a payment gateway Void operation
         * @param {PayToolsApiModelsCaptureVoidRequestModel} payToolsApiModelsCaptureVoidRequestModel Capture or Void Request Model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidOperation: async (payToolsApiModelsCaptureVoidRequestModel: PayToolsApiModelsCaptureVoidRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsCaptureVoidRequestModel' is not null or undefined
            assertParamExists('voidOperation', 'payToolsApiModelsCaptureVoidRequestModel', payToolsApiModelsCaptureVoidRequestModel)
            const localVarPath = `/PaymentGateway/void`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsCaptureVoidRequestModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/PaymentGateway/void',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsCaptureVoidRequestModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentGatewayApi - functional programming interface
 * @export
 */
export const PaymentGatewayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentGatewayApiAxiosParamCreator(configuration)
    return {
        /**
         * To provide you with full payment orchestration capabilities, we have integrated with many different payment gateways and processors around the world. This method allows you to retrieve the list of all integrated payment gateways in our system and provide you with the relevant connection settings required for each of them.  To see a graphical list of the supported payment gateways, please visit our website.  If you would like us to support a new payment gateway not on the list, please contact our support.
         * @summary List all payment gateways
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGateways(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PayToolsApiModelsPaymentGatewayDescriptionModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGateways(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to perform an \"authorize\" operation (also called \"preauthorization\" or \"authorization\") through your payment gateway. When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation (using our `[PUT] /PaymentGateway/capture` method).  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".  If needed, you can void this \"authorize\" operation by using the `[DELETE] /PaymentGateway/void` method
         * @summary Perform a payment gateway authorize operation
         * @param {PaymentGatewayApiPerformAuthorizeOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performAuthorizeOperation(requestParameters: PaymentGatewayApiPerformAuthorizeOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsOperationResult>> {
            const payToolsApiModelsAuthRequestModel: PayToolsApiModelsAuthRequestModel = {
                currency: requestParameters.currency,
                isDigital: requestParameters.isDigital,
                orderDesc: requestParameters.orderDesc,
                payerDetails: requestParameters.payerDetails,
                card: requestParameters.card,
                amount: requestParameters.amount,
                myRef: requestParameters.myRef,
                paymentGatewayAccountName: requestParameters.paymentGatewayAccountName,
                certificateName: requestParameters.certificateName,
                paymentGatewayAccount: requestParameters.paymentGatewayAccount,
                networkTokenBrand: requestParameters.networkTokenBrand
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performAuthorizeOperation(payToolsApiModelsAuthRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to perform a \"capture\" operation on a previously created \"authorize\" operation (see our `[POST] /PaymentGateway/authorize` method for additional information).  When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation.  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".
         * @summary Perform a payment gateway capture operation
         * @param {PaymentGatewayApiPerformCaptureOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performCaptureOperation(requestParameters: PaymentGatewayApiPerformCaptureOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsOperationResult>> {
            const payToolsApiModelsCaptureVoidRequestModel: PayToolsApiModelsCaptureVoidRequestModel = {
                currency: requestParameters.currency,
                refTransId: requestParameters.refTransId,
                card: requestParameters.card,
                amount: requestParameters.amount,
                myRef: requestParameters.myRef,
                paymentGatewayAccountName: requestParameters.paymentGatewayAccountName,
                certificateName: requestParameters.certificateName,
                paymentGatewayAccount: requestParameters.paymentGatewayAccount,
                networkTokenBrand: requestParameters.networkTokenBrand
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performCaptureOperation(payToolsApiModelsCaptureVoidRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to perform a \"charge\" operation through your payment gateway. A \"charge\" operation will request immediate payment from the card and the card owner will see this listed as a transaction in their card statement.  If needed, you can void this \"charge\" operation by using the `[DELETE] /PaymentGateway/void` method.
         * @summary Perform a payment gateway charge operation
         * @param {PaymentGatewayApiPerformChargeOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performChargeOperation(requestParameters: PaymentGatewayApiPerformChargeOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsOperationResult>> {
            const payToolsApiModelsAuthRequestModel: PayToolsApiModelsAuthRequestModel = {
                currency: requestParameters.currency,
                isDigital: requestParameters.isDigital,
                orderDesc: requestParameters.orderDesc,
                payerDetails: requestParameters.payerDetails,
                card: requestParameters.card,
                amount: requestParameters.amount,
                myRef: requestParameters.myRef,
                paymentGatewayAccountName: requestParameters.paymentGatewayAccountName,
                certificateName: requestParameters.certificateName,
                paymentGatewayAccount: requestParameters.paymentGatewayAccount,
                networkTokenBrand: requestParameters.networkTokenBrand
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performChargeOperation(payToolsApiModelsAuthRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to submit a \"refund\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"capture\" (using `[POST] /PaymentGateway/capture`) operations.
         * @summary Perform a payment gateway refund operation
         * @param {PaymentGatewayApiPerformRefundOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performRefundOperation(requestParameters: PaymentGatewayApiPerformRefundOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsOperationResult>> {
            const payToolsApiModelsRefundRequestModel: PayToolsApiModelsRefundRequestModel = {
                currency: requestParameters.currency,
                refTransId: requestParameters.refTransId,
                payerDetails: requestParameters.payerDetails,
                card: requestParameters.card,
                amount: requestParameters.amount,
                myRef: requestParameters.myRef,
                paymentGatewayAccountName: requestParameters.paymentGatewayAccountName,
                certificateName: requestParameters.certificateName,
                paymentGatewayAccount: requestParameters.paymentGatewayAccount,
                networkTokenBrand: requestParameters.networkTokenBrand
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performRefundOperation(payToolsApiModelsRefundRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to submit a \"void\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"authorize\" (using `[POST] /PaymentGateway/authorize`) operations.
         * @summary Perform a payment gateway Void operation
         * @param {PaymentGatewayApiVoidOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voidOperation(requestParameters: PaymentGatewayApiVoidOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentsOperationResult>> {
            const payToolsApiModelsCaptureVoidRequestModel: PayToolsApiModelsCaptureVoidRequestModel = {
                currency: requestParameters.currency,
                refTransId: requestParameters.refTransId,
                card: requestParameters.card,
                amount: requestParameters.amount,
                myRef: requestParameters.myRef,
                paymentGatewayAccountName: requestParameters.paymentGatewayAccountName,
                certificateName: requestParameters.certificateName,
                paymentGatewayAccount: requestParameters.paymentGatewayAccount,
                networkTokenBrand: requestParameters.networkTokenBrand
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.voidOperation(payToolsApiModelsCaptureVoidRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentGatewayApi - factory interface
 * @export
 */
export const PaymentGatewayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentGatewayApiFp(configuration)
    return {
        /**
         * To provide you with full payment orchestration capabilities, we have integrated with many different payment gateways and processors around the world. This method allows you to retrieve the list of all integrated payment gateways in our system and provide you with the relevant connection settings required for each of them.  To see a graphical list of the supported payment gateways, please visit our website.  If you would like us to support a new payment gateway not on the list, please contact our support.
         * @summary List all payment gateways
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGateways(options?: AxiosRequestConfig): AxiosPromise<Array<PayToolsApiModelsPaymentGatewayDescriptionModel>> {
            return localVarFp.listGateways(options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to perform an \"authorize\" operation (also called \"preauthorization\" or \"authorization\") through your payment gateway. When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation (using our `[PUT] /PaymentGateway/capture` method).  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".  If needed, you can void this \"authorize\" operation by using the `[DELETE] /PaymentGateway/void` method
         * @summary Perform a payment gateway authorize operation
         * @param {PaymentGatewayApiPerformAuthorizeOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performAuthorizeOperation(requestParameters: PaymentGatewayApiPerformAuthorizeOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsOperationResult> {
            return localVarFp.performAuthorizeOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to perform a \"capture\" operation on a previously created \"authorize\" operation (see our `[POST] /PaymentGateway/authorize` method for additional information).  When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation.  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".
         * @summary Perform a payment gateway capture operation
         * @param {PaymentGatewayApiPerformCaptureOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performCaptureOperation(requestParameters: PaymentGatewayApiPerformCaptureOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsOperationResult> {
            return localVarFp.performCaptureOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to perform a \"charge\" operation through your payment gateway. A \"charge\" operation will request immediate payment from the card and the card owner will see this listed as a transaction in their card statement.  If needed, you can void this \"charge\" operation by using the `[DELETE] /PaymentGateway/void` method.
         * @summary Perform a payment gateway charge operation
         * @param {PaymentGatewayApiPerformChargeOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performChargeOperation(requestParameters: PaymentGatewayApiPerformChargeOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsOperationResult> {
            return localVarFp.performChargeOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to submit a \"refund\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"capture\" (using `[POST] /PaymentGateway/capture`) operations.
         * @summary Perform a payment gateway refund operation
         * @param {PaymentGatewayApiPerformRefundOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performRefundOperation(requestParameters: PaymentGatewayApiPerformRefundOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsOperationResult> {
            return localVarFp.performRefundOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to submit a \"void\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"authorize\" (using `[POST] /PaymentGateway/authorize`) operations.
         * @summary Perform a payment gateway Void operation
         * @param {PaymentGatewayApiVoidOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidOperation(requestParameters: PaymentGatewayApiVoidOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentsOperationResult> {
            return localVarFp.voidOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for performAuthorizeOperation operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiPerformAuthorizeOperationRequest
 */
export type PaymentGatewayApiPerformAuthorizeOperationRequest = {
    
} & PayToolsApiModelsAuthRequestModel

/**
 * Request parameters for performCaptureOperation operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiPerformCaptureOperationRequest
 */
export type PaymentGatewayApiPerformCaptureOperationRequest = {
    
} & PayToolsApiModelsCaptureVoidRequestModel

/**
 * Request parameters for performChargeOperation operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiPerformChargeOperationRequest
 */
export type PaymentGatewayApiPerformChargeOperationRequest = {
    
} & PayToolsApiModelsAuthRequestModel

/**
 * Request parameters for performRefundOperation operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiPerformRefundOperationRequest
 */
export type PaymentGatewayApiPerformRefundOperationRequest = {
    
} & PayToolsApiModelsRefundRequestModel

/**
 * Request parameters for voidOperation operation in PaymentGatewayApi.
 * @export
 * @interface PaymentGatewayApiVoidOperationRequest
 */
export type PaymentGatewayApiVoidOperationRequest = {
    
} & PayToolsApiModelsCaptureVoidRequestModel

/**
 * PaymentGatewayApiGenerated - object-oriented interface
 * @export
 * @class PaymentGatewayApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentGatewayApiGenerated extends BaseAPI {
    /**
     * To provide you with full payment orchestration capabilities, we have integrated with many different payment gateways and processors around the world. This method allows you to retrieve the list of all integrated payment gateways in our system and provide you with the relevant connection settings required for each of them.  To see a graphical list of the supported payment gateways, please visit our website.  If you would like us to support a new payment gateway not on the list, please contact our support.
     * @summary List all payment gateways
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApiGenerated
     */
    public listGateways(options?: AxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).listGateways(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to perform an \"authorize\" operation (also called \"preauthorization\" or \"authorization\") through your payment gateway. When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation (using our `[PUT] /PaymentGateway/capture` method).  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".  If needed, you can void this \"authorize\" operation by using the `[DELETE] /PaymentGateway/void` method
     * @summary Perform a payment gateway authorize operation
     * @param {PaymentGatewayApiPerformAuthorizeOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApiGenerated
     */
    public performAuthorizeOperation(requestParameters: PaymentGatewayApiPerformAuthorizeOperationRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).performAuthorizeOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to perform a \"capture\" operation on a previously created \"authorize\" operation (see our `[POST] /PaymentGateway/authorize` method for additional information).  When you perform the \"authorize\" operation, the bank that issued the credit card will place an authorization of the total amount of the funds. This is how the bank determines if the funds are available to make the purchase. The card will not actually be “charged” until you perform the \"capture\" operation.  **Please note**, different card brands and different banks allow for different time frames on the lifespan of a payment authorization. You will need to check with your payment processor on how long you would have between performing an \"authorize\" operation and a \"charge\" operation\".
     * @summary Perform a payment gateway capture operation
     * @param {PaymentGatewayApiPerformCaptureOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApiGenerated
     */
    public performCaptureOperation(requestParameters: PaymentGatewayApiPerformCaptureOperationRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).performCaptureOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to perform a \"charge\" operation through your payment gateway. A \"charge\" operation will request immediate payment from the card and the card owner will see this listed as a transaction in their card statement.  If needed, you can void this \"charge\" operation by using the `[DELETE] /PaymentGateway/void` method.
     * @summary Perform a payment gateway charge operation
     * @param {PaymentGatewayApiPerformChargeOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApiGenerated
     */
    public performChargeOperation(requestParameters: PaymentGatewayApiPerformChargeOperationRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).performChargeOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to submit a \"refund\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"capture\" (using `[POST] /PaymentGateway/capture`) operations.
     * @summary Perform a payment gateway refund operation
     * @param {PaymentGatewayApiPerformRefundOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApiGenerated
     */
    public performRefundOperation(requestParameters: PaymentGatewayApiPerformRefundOperationRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).performRefundOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to submit a \"void\" operation against a previously created \"charge\" (using `[POST] /PaymentGateway/charge`) or \"authorize\" (using `[POST] /PaymentGateway/authorize`) operations.
     * @summary Perform a payment gateway Void operation
     * @param {PaymentGatewayApiVoidOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApiGenerated
     */
    public voidOperation(requestParameters: PaymentGatewayApiVoidOperationRequest, options?: AxiosRequestConfig) {
        return PaymentGatewayApiFp(this.configuration).voidOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
