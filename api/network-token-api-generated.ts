/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NetworkTokenRequestSource } from '../models';
// @ts-ignore
import { NetworkTokenTokenizationResult } from '../models';
// @ts-ignore
import { PayToolsApiModelsCardBaseWithSecurityCode } from '../models';
// @ts-ignore
import { PayToolsApiModelsNetworkTokenizationDeleteTokenRequest } from '../models';
// @ts-ignore
import { PayToolsApiModelsNetworkTokenizationTokenizeRequest } from '../models';
// @ts-ignore
import { PayToolsApiModelsTokenizationRequest } from '../models';
// @ts-ignore
import { PaymentsNetworkTokenSchemes } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NetworkTokenApi - axios parameter creator
 * @export
 */
export const NetworkTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Network-tokenize a card
         * @param {PayToolsApiModelsNetworkTokenizationTokenizeRequest} [payToolsApiModelsNetworkTokenizationTokenizeRequest] Tokenization Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardTokenize: async (payToolsApiModelsNetworkTokenizationTokenizeRequest?: PayToolsApiModelsNetworkTokenizationTokenizeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/NetworkToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsNetworkTokenizationTokenizeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/NetworkToken',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsNetworkTokenizationTokenizeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a Network-token
         * @param {PayToolsApiModelsNetworkTokenizationDeleteTokenRequest} [payToolsApiModelsNetworkTokenizationDeleteTokenRequest] Delete Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (payToolsApiModelsNetworkTokenizationDeleteTokenRequest?: PayToolsApiModelsNetworkTokenizationDeleteTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/NetworkToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsNetworkTokenizationDeleteTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/NetworkToken',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsNetworkTokenizationDeleteTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkTokenApi - functional programming interface
 * @export
 */
export const NetworkTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NetworkTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Network-tokenize a card
         * @param {NetworkTokenApiCardTokenizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cardTokenize(requestParameters: NetworkTokenApiCardTokenizeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkTokenTokenizationResult>> {
            const payToolsApiModelsNetworkTokenizationTokenizeRequest: PayToolsApiModelsNetworkTokenizationTokenizeRequest = {
                tokenizationRequest: requestParameters.tokenizationRequest,
                card: requestParameters.card
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cardTokenize(payToolsApiModelsNetworkTokenizationTokenizeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a Network-token
         * @param {NetworkTokenApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: NetworkTokenApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const payToolsApiModelsNetworkTokenizationDeleteTokenRequest: PayToolsApiModelsNetworkTokenizationDeleteTokenRequest = {
                source: requestParameters.source,
                brand: requestParameters.brand,
                tokenId: requestParameters.tokenId,
                reason: requestParameters.reason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(payToolsApiModelsNetworkTokenizationDeleteTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NetworkTokenApi - factory interface
 * @export
 */
export const NetworkTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NetworkTokenApiFp(configuration)
    return {
        /**
         * 
         * @summary Network-tokenize a card
         * @param {NetworkTokenApiCardTokenizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cardTokenize(requestParameters: NetworkTokenApiCardTokenizeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<NetworkTokenTokenizationResult> {
            return localVarFp.cardTokenize(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a Network-token
         * @param {NetworkTokenApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: NetworkTokenApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cardTokenize operation in NetworkTokenApi.
 * @export
 * @interface NetworkTokenApiCardTokenizeRequest
 */
export type NetworkTokenApiCardTokenizeRequest = {
    
} & PayToolsApiModelsNetworkTokenizationTokenizeRequest

/**
 * Request parameters for delete operation in NetworkTokenApi.
 * @export
 * @interface NetworkTokenApiDeleteRequest
 */
export type NetworkTokenApiDeleteRequest = {
    
} & PayToolsApiModelsNetworkTokenizationDeleteTokenRequest

/**
 * NetworkTokenApiGenerated - object-oriented interface
 * @export
 * @class NetworkTokenApiGenerated
 * @extends {BaseAPI}
 */
export class NetworkTokenApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Network-tokenize a card
     * @param {NetworkTokenApiCardTokenizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkTokenApiGenerated
     */
    public cardTokenize(requestParameters: NetworkTokenApiCardTokenizeRequest = {}, options?: AxiosRequestConfig) {
        return NetworkTokenApiFp(this.configuration).cardTokenize(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a Network-token
     * @param {NetworkTokenApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkTokenApiGenerated
     */
    public delete(requestParameters: NetworkTokenApiDeleteRequest, options?: AxiosRequestConfig) {
        return NetworkTokenApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
