/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsBrandLookupResult } from '../models';
// @ts-ignore
import { PayToolsApiModelsCardValidationResults } from '../models';
// @ts-ignore
import { PayToolsApiModelsIinData } from '../models';
// @ts-ignore
import { PayToolsApiModelsLuhnCheckResultsWithIinData } from '../models';
// @ts-ignore
import { PayToolsApiModelsPayerBaseWithClientIp } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ToolsApi - axios parameter creator
 * @export
 */
export const ToolsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method allows you to lookup the brand of the card provided.               By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the brand of the card (Visa, Mastercard, Amex, etc.).              In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
         * @summary Brand Lookup
         * @param {string} iin Card\&#39;s BIN / IIN (the first 6 to 11 digits of the card number)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandLookup: async (iin: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iin' is not null or undefined
            assertParamExists('getBrandLookup', 'iin', iin)
            const localVarPath = `/Tools/brand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (iin !== undefined) {
                localVarQueryParameter['iin'] = iin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Tools/brand',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to lookup the metadata of the card provided.   By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the full metadata available for this card./r/nI  In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
         * @summary Metadata Lookup
         * @param {string} iin Card\&#39;s BIN / IIN (the first 6 to 11 digits of the card number)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupMetadata: async (iin: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iin' is not null or undefined
            assertParamExists('lookupMetadata', 'iin', iin)
            const localVarPath = `/Tools/iin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (iin !== undefined) {
                localVarQueryParameter['iin'] = iin;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Tools/iin',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to validate the card details against the card\'s meta data. By providing the billing address and IP address of the card owner, we validate those against the metadata of the card and provide a risk assessment for this transaction.  All you would need is the card\'s BIN / IIN (the first 6 to 11 digits of the card number), the billing address and IP address.  The response of this method will include the full metadata information for this BIN including the risk assessment.
         * @summary Card Validation
         * @param {string} iin Card\&#39;s BIN / IIN (the first 6 to 11 digits of the card number)
         * @param {PayToolsApiModelsPayerBaseWithClientIp} payToolsApiModelsPayerBaseWithClientIp payer details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCardDetails: async (iin: string, payToolsApiModelsPayerBaseWithClientIp: PayToolsApiModelsPayerBaseWithClientIp, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iin' is not null or undefined
            assertParamExists('validateCardDetails', 'iin', iin)
            // verify required parameter 'payToolsApiModelsPayerBaseWithClientIp' is not null or undefined
            assertParamExists('validateCardDetails', 'payToolsApiModelsPayerBaseWithClientIp', payToolsApiModelsPayerBaseWithClientIp)
            const localVarPath = `/Tools/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (iin !== undefined) {
                localVarQueryParameter['iin'] = iin;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsPayerBaseWithClientIp,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Tools/validate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsPayerBaseWithClientIp, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to provide the card number and validate it against the<a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\" target=\"_blank\"> Luhn algorithm</a>.In addition, you can choose to receive the card\'s metadata in the response.
         * @summary Luhn Algorithm Validation
         * @param {string} number The full card number to be validated.
         * @param {boolean} [metaData] An optional indicator to specify whether the card metadata should be included in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateLuhnCard: async (number: string, metaData?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'number' is not null or undefined
            assertParamExists('validateLuhnCard', 'number', number)
            const localVarPath = `/Tools/luhn`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (number !== undefined) {
                localVarQueryParameter['number'] = number;
            }

            if (metaData !== undefined) {
                localVarQueryParameter['metaData'] = metaData;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/Tools/luhn',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToolsApi - functional programming interface
 * @export
 */
export const ToolsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToolsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method allows you to lookup the brand of the card provided.               By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the brand of the card (Visa, Mastercard, Amex, etc.).              In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
         * @summary Brand Lookup
         * @param {ToolsApiGetBrandLookupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBrandLookup(requestParameters: ToolsApiGetBrandLookupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsBrandLookupResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBrandLookup(requestParameters.iin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to lookup the metadata of the card provided.   By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the full metadata available for this card./r/nI  In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
         * @summary Metadata Lookup
         * @param {ToolsApiLookupMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lookupMetadata(requestParameters: ToolsApiLookupMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsIinData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupMetadata(requestParameters.iin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to validate the card details against the card\'s meta data. By providing the billing address and IP address of the card owner, we validate those against the metadata of the card and provide a risk assessment for this transaction.  All you would need is the card\'s BIN / IIN (the first 6 to 11 digits of the card number), the billing address and IP address.  The response of this method will include the full metadata information for this BIN including the risk assessment.
         * @summary Card Validation
         * @param {ToolsApiValidateCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateCardDetails(requestParameters: ToolsApiValidateCardDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsCardValidationResults>> {
            const payToolsApiModelsPayerBaseWithClientIp: PayToolsApiModelsPayerBaseWithClientIp = {
                clientIPAddress: requestParameters.clientIPAddress,
                city: requestParameters.city,
                stateProvince: requestParameters.stateProvince,
                countryCode: requestParameters.countryCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateCardDetails(requestParameters.iin, payToolsApiModelsPayerBaseWithClientIp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to provide the card number and validate it against the<a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\" target=\"_blank\"> Luhn algorithm</a>.In addition, you can choose to receive the card\'s metadata in the response.
         * @summary Luhn Algorithm Validation
         * @param {ToolsApiValidateLuhnCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateLuhnCard(requestParameters: ToolsApiValidateLuhnCardRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsLuhnCheckResultsWithIinData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateLuhnCard(requestParameters.number, requestParameters.metaData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ToolsApi - factory interface
 * @export
 */
export const ToolsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToolsApiFp(configuration)
    return {
        /**
         * This method allows you to lookup the brand of the card provided.               By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the brand of the card (Visa, Mastercard, Amex, etc.).              In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
         * @summary Brand Lookup
         * @param {ToolsApiGetBrandLookupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBrandLookup(requestParameters: ToolsApiGetBrandLookupRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsBrandLookupResult> {
            return localVarFp.getBrandLookup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to lookup the metadata of the card provided.   By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the full metadata available for this card./r/nI  In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
         * @summary Metadata Lookup
         * @param {ToolsApiLookupMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lookupMetadata(requestParameters: ToolsApiLookupMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsIinData> {
            return localVarFp.lookupMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to validate the card details against the card\'s meta data. By providing the billing address and IP address of the card owner, we validate those against the metadata of the card and provide a risk assessment for this transaction.  All you would need is the card\'s BIN / IIN (the first 6 to 11 digits of the card number), the billing address and IP address.  The response of this method will include the full metadata information for this BIN including the risk assessment.
         * @summary Card Validation
         * @param {ToolsApiValidateCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateCardDetails(requestParameters: ToolsApiValidateCardDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsCardValidationResults> {
            return localVarFp.validateCardDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to provide the card number and validate it against the<a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\" target=\"_blank\"> Luhn algorithm</a>.In addition, you can choose to receive the card\'s metadata in the response.
         * @summary Luhn Algorithm Validation
         * @param {ToolsApiValidateLuhnCardRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateLuhnCard(requestParameters: ToolsApiValidateLuhnCardRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsLuhnCheckResultsWithIinData> {
            return localVarFp.validateLuhnCard(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBrandLookup operation in ToolsApi.
 * @export
 * @interface ToolsApiGetBrandLookupRequest
 */
export type ToolsApiGetBrandLookupRequest = {
    
    /**
    * Card\'s BIN / IIN (the first 6 to 11 digits of the card number)
    * @type {string}
    * @memberof ToolsApiGetBrandLookup
    */
    readonly iin: string
    
}

/**
 * Request parameters for lookupMetadata operation in ToolsApi.
 * @export
 * @interface ToolsApiLookupMetadataRequest
 */
export type ToolsApiLookupMetadataRequest = {
    
    /**
    * Card\'s BIN / IIN (the first 6 to 11 digits of the card number)
    * @type {string}
    * @memberof ToolsApiLookupMetadata
    */
    readonly iin: string
    
}

/**
 * Request parameters for validateCardDetails operation in ToolsApi.
 * @export
 * @interface ToolsApiValidateCardDetailsRequest
 */
export type ToolsApiValidateCardDetailsRequest = {
    
    /**
    * Card\'s BIN / IIN (the first 6 to 11 digits of the card number)
    * @type {string}
    * @memberof ToolsApiValidateCardDetails
    */
    readonly iin: string
    
} & PayToolsApiModelsPayerBaseWithClientIp

/**
 * Request parameters for validateLuhnCard operation in ToolsApi.
 * @export
 * @interface ToolsApiValidateLuhnCardRequest
 */
export type ToolsApiValidateLuhnCardRequest = {
    
    /**
    * The full card number to be validated.
    * @type {string}
    * @memberof ToolsApiValidateLuhnCard
    */
    readonly number: string
    
    /**
    * An optional indicator to specify whether the card metadata should be included in the response.
    * @type {boolean}
    * @memberof ToolsApiValidateLuhnCard
    */
    readonly metaData?: boolean
    
}

/**
 * ToolsApiGenerated - object-oriented interface
 * @export
 * @class ToolsApiGenerated
 * @extends {BaseAPI}
 */
export class ToolsApiGenerated extends BaseAPI {
    /**
     * This method allows you to lookup the brand of the card provided.               By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the brand of the card (Visa, Mastercard, Amex, etc.).              In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
     * @summary Brand Lookup
     * @param {ToolsApiGetBrandLookupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolsApiGenerated
     */
    public getBrandLookup(requestParameters: ToolsApiGetBrandLookupRequest, options?: AxiosRequestConfig) {
        return ToolsApiFp(this.configuration).getBrandLookup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to lookup the metadata of the card provided.   By providing the card\'s BIN / IIN (the first 6 to 11 digits of the card number), we lookup and return the full metadata available for this card./r/nI  In addition, we will also provide the URL to the logo of the card brand - you can then reference this image in your card capture form.
     * @summary Metadata Lookup
     * @param {ToolsApiLookupMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolsApiGenerated
     */
    public lookupMetadata(requestParameters: ToolsApiLookupMetadataRequest, options?: AxiosRequestConfig) {
        return ToolsApiFp(this.configuration).lookupMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to validate the card details against the card\'s meta data. By providing the billing address and IP address of the card owner, we validate those against the metadata of the card and provide a risk assessment for this transaction.  All you would need is the card\'s BIN / IIN (the first 6 to 11 digits of the card number), the billing address and IP address.  The response of this method will include the full metadata information for this BIN including the risk assessment.
     * @summary Card Validation
     * @param {ToolsApiValidateCardDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolsApiGenerated
     */
    public validateCardDetails(requestParameters: ToolsApiValidateCardDetailsRequest, options?: AxiosRequestConfig) {
        return ToolsApiFp(this.configuration).validateCardDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to provide the card number and validate it against the<a href=\"https://en.wikipedia.org/wiki/Luhn_algorithm\" target=\"_blank\"> Luhn algorithm</a>.In addition, you can choose to receive the card\'s metadata in the response.
     * @summary Luhn Algorithm Validation
     * @param {ToolsApiValidateLuhnCardRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolsApiGenerated
     */
    public validateLuhnCard(requestParameters: ToolsApiValidateLuhnCardRequest, options?: AxiosRequestConfig) {
        return ToolsApiFp(this.configuration).validateLuhnCard(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
