/* tslint:disable */
/* eslint-disable */
/*
Orchestra API

Code Version 1.0.7.15

The version of the OpenAPI document: Prod


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayToolsApiModelsCvvOpsChargeRequest } from '../models';
// @ts-ignore
import { PayToolsApiModelsJwsOutputModel } from '../models';
// @ts-ignore
import { PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationChargePresetData } from '../models';
// @ts-ignore
import { PayToolsBlAuthenticationCvvSignedDataModel } from '../models';
// @ts-ignore
import { PayToolsSharedModelsCardStoredCard } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CvvOperationsApi - axios parameter creator
 * @export
 */
export const CvvOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a token to start a CVV operation
         * @param {number} ttl Time to live for the returned token
         * @param {PayToolsBlAuthenticationCvvSignedDataModel} [payToolsBlAuthenticationCvvSignedDataModel] The data to be validated in further requests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenCvvOperation: async (ttl: number, payToolsBlAuthenticationCvvSignedDataModel?: PayToolsBlAuthenticationCvvSignedDataModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ttl' is not null or undefined
            assertParamExists('getTokenCvvOperation', 'ttl', ttl)
            const localVarPath = `/CvvOperations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-Api-Key", keyParamName: "apiKeyAuth", configuration })
            if (ttl !== undefined) {
                localVarQueryParameter['ttl'] = ttl;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsBlAuthenticationCvvSignedDataModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CvvOperations',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsBlAuthenticationCvvSignedDataModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Perform Univesal payment gateway charge operation
         * @param {PayToolsApiModelsCvvOpsChargeRequest} payToolsApiModelsCvvOpsChargeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performUniversalPaymentGatewayCharge: async (payToolsApiModelsCvvOpsChargeRequest: PayToolsApiModelsCvvOpsChargeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payToolsApiModelsCvvOpsChargeRequest' is not null or undefined
            assertParamExists('performUniversalPaymentGatewayCharge', 'payToolsApiModelsCvvOpsChargeRequest', payToolsApiModelsCvvOpsChargeRequest)
            const localVarPath = `/CvvOperations/charge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payToolsApiModelsCvvOpsChargeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CvvOperations/charge',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payToolsApiModelsCvvOpsChargeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Perform validation of the operation using signed data from charge operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOperation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/CvvOperations/opValidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/CvvOperations/opValidate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CvvOperationsApi - functional programming interface
 * @export
 */
export const CvvOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CvvOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a token to start a CVV operation
         * @param {CvvOperationsApiGetTokenCvvOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTokenCvvOperation(requestParameters: CvvOperationsApiGetTokenCvvOperationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsOutputModel>> {
            const payToolsBlAuthenticationCvvSignedDataModel: PayToolsBlAuthenticationCvvSignedDataModel = {
                card: requestParameters.card,
                crg_d: requestParameters.crg_d
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTokenCvvOperation(requestParameters.ttl, payToolsBlAuthenticationCvvSignedDataModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Perform Univesal payment gateway charge operation
         * @param {CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performUniversalPaymentGatewayCharge(requestParameters: CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull>> {
            const payToolsApiModelsCvvOpsChargeRequest: PayToolsApiModelsCvvOpsChargeRequest = {
                cvv: requestParameters.cvv
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performUniversalPaymentGatewayCharge(payToolsApiModelsCvvOpsChargeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Perform validation of the operation using signed data from charge operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateOperation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayToolsBlAuthenticationCvvSignedDataModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateOperation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CvvOperationsApi - factory interface
 * @export
 */
export const CvvOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CvvOperationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a token to start a CVV operation
         * @param {CvvOperationsApiGetTokenCvvOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTokenCvvOperation(requestParameters: CvvOperationsApiGetTokenCvvOperationRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsOutputModel> {
            return localVarFp.getTokenCvvOperation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Perform Univesal payment gateway charge operation
         * @param {CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performUniversalPaymentGatewayCharge(requestParameters: CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest, options?: AxiosRequestConfig): AxiosPromise<PayToolsApiModelsJwsOutputModel1PayToolsBlAuthenticationChargeCardSignedModelPayToolsBlVersion1000CultureneutralPublicKeyTokennull> {
            return localVarFp.performUniversalPaymentGatewayCharge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Perform validation of the operation using signed data from charge operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateOperation(options?: AxiosRequestConfig): AxiosPromise<PayToolsBlAuthenticationCvvSignedDataModel> {
            return localVarFp.validateOperation(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTokenCvvOperation operation in CvvOperationsApi.
 * @export
 * @interface CvvOperationsApiGetTokenCvvOperationRequest
 */
export type CvvOperationsApiGetTokenCvvOperationRequest = {
    
    /**
    * Time to live for the returned token
    * @type {number}
    * @memberof CvvOperationsApiGetTokenCvvOperation
    */
    readonly ttl: number
    
} & PayToolsBlAuthenticationCvvSignedDataModel

/**
 * Request parameters for performUniversalPaymentGatewayCharge operation in CvvOperationsApi.
 * @export
 * @interface CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest
 */
export type CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest = {
    
} & PayToolsApiModelsCvvOpsChargeRequest

/**
 * CvvOperationsApiGenerated - object-oriented interface
 * @export
 * @class CvvOperationsApiGenerated
 * @extends {BaseAPI}
 */
export class CvvOperationsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get a token to start a CVV operation
     * @param {CvvOperationsApiGetTokenCvvOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvvOperationsApiGenerated
     */
    public getTokenCvvOperation(requestParameters: CvvOperationsApiGetTokenCvvOperationRequest, options?: AxiosRequestConfig) {
        return CvvOperationsApiFp(this.configuration).getTokenCvvOperation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Perform Univesal payment gateway charge operation
     * @param {CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvvOperationsApiGenerated
     */
    public performUniversalPaymentGatewayCharge(requestParameters: CvvOperationsApiPerformUniversalPaymentGatewayChargeRequest, options?: AxiosRequestConfig) {
        return CvvOperationsApiFp(this.configuration).performUniversalPaymentGatewayCharge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Perform validation of the operation using signed data from charge operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvvOperationsApiGenerated
     */
    public validateOperation(options?: AxiosRequestConfig) {
        return CvvOperationsApiFp(this.configuration).validateOperation(options).then((request) => request(this.axios, this.basePath));
    }
}
